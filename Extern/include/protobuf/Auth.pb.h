// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Auth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Auth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Auth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Auth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Auth_2eproto;
namespace auth {
class AuthenticateWeb;
class AuthenticateWebDefaultTypeInternal;
extern AuthenticateWebDefaultTypeInternal _AuthenticateWeb_default_instance_;
class AuthenticateWebFailure;
class AuthenticateWebFailureDefaultTypeInternal;
extern AuthenticateWebFailureDefaultTypeInternal _AuthenticateWebFailure_default_instance_;
class AuthenticateWebSuccess;
class AuthenticateWebSuccessDefaultTypeInternal;
extern AuthenticateWebSuccessDefaultTypeInternal _AuthenticateWebSuccess_default_instance_;
class CreateAccountWeb;
class CreateAccountWebDefaultTypeInternal;
extern CreateAccountWebDefaultTypeInternal _CreateAccountWeb_default_instance_;
class CreateAccountWebFaliure;
class CreateAccountWebFaliureDefaultTypeInternal;
extern CreateAccountWebFaliureDefaultTypeInternal _CreateAccountWebFaliure_default_instance_;
class CreateAccountWebSuccess;
class CreateAccountWebSuccessDefaultTypeInternal;
extern CreateAccountWebSuccessDefaultTypeInternal _CreateAccountWebSuccess_default_instance_;
}  // namespace auth
PROTOBUF_NAMESPACE_OPEN
template<> ::auth::AuthenticateWeb* Arena::CreateMaybeMessage<::auth::AuthenticateWeb>(Arena*);
template<> ::auth::AuthenticateWebFailure* Arena::CreateMaybeMessage<::auth::AuthenticateWebFailure>(Arena*);
template<> ::auth::AuthenticateWebSuccess* Arena::CreateMaybeMessage<::auth::AuthenticateWebSuccess>(Arena*);
template<> ::auth::CreateAccountWeb* Arena::CreateMaybeMessage<::auth::CreateAccountWeb>(Arena*);
template<> ::auth::CreateAccountWebFaliure* Arena::CreateMaybeMessage<::auth::CreateAccountWebFaliure>(Arena*);
template<> ::auth::CreateAccountWebSuccess* Arena::CreateMaybeMessage<::auth::CreateAccountWebSuccess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace auth {

enum CreateAccountWebFaliure_AccountFailureReason : int {
  CreateAccountWebFaliure_AccountFailureReason_ACCOUNT_ALREADY_EXISTS = 0,
  CreateAccountWebFaliure_AccountFailureReason_INVALID_PASSWORD = 1,
  CreateAccountWebFaliure_AccountFailureReason_INTERNAL_SERVER_ERROR = 2,
  CreateAccountWebFaliure_AccountFailureReason_CreateAccountWebFaliure_AccountFailureReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CreateAccountWebFaliure_AccountFailureReason_CreateAccountWebFaliure_AccountFailureReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CreateAccountWebFaliure_AccountFailureReason_IsValid(int value);
constexpr CreateAccountWebFaliure_AccountFailureReason CreateAccountWebFaliure_AccountFailureReason_AccountFailureReason_MIN = CreateAccountWebFaliure_AccountFailureReason_ACCOUNT_ALREADY_EXISTS;
constexpr CreateAccountWebFaliure_AccountFailureReason CreateAccountWebFaliure_AccountFailureReason_AccountFailureReason_MAX = CreateAccountWebFaliure_AccountFailureReason_INTERNAL_SERVER_ERROR;
constexpr int CreateAccountWebFaliure_AccountFailureReason_AccountFailureReason_ARRAYSIZE = CreateAccountWebFaliure_AccountFailureReason_AccountFailureReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateAccountWebFaliure_AccountFailureReason_descriptor();
template<typename T>
inline const std::string& CreateAccountWebFaliure_AccountFailureReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateAccountWebFaliure_AccountFailureReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateAccountWebFaliure_AccountFailureReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateAccountWebFaliure_AccountFailureReason_descriptor(), enum_t_value);
}
inline bool CreateAccountWebFaliure_AccountFailureReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateAccountWebFaliure_AccountFailureReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateAccountWebFaliure_AccountFailureReason>(
    CreateAccountWebFaliure_AccountFailureReason_descriptor(), name, value);
}
enum AuthenticateWebFailure_AuthenticateFailureReason : int {
  AuthenticateWebFailure_AuthenticateFailureReason_INVALID_CREDENTIALS = 0,
  AuthenticateWebFailure_AuthenticateFailureReason_INTERNALL_SERVER_ERROR = 1,
  AuthenticateWebFailure_AuthenticateFailureReason_AuthenticateWebFailure_AuthenticateFailureReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AuthenticateWebFailure_AuthenticateFailureReason_AuthenticateWebFailure_AuthenticateFailureReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AuthenticateWebFailure_AuthenticateFailureReason_IsValid(int value);
constexpr AuthenticateWebFailure_AuthenticateFailureReason AuthenticateWebFailure_AuthenticateFailureReason_AuthenticateFailureReason_MIN = AuthenticateWebFailure_AuthenticateFailureReason_INVALID_CREDENTIALS;
constexpr AuthenticateWebFailure_AuthenticateFailureReason AuthenticateWebFailure_AuthenticateFailureReason_AuthenticateFailureReason_MAX = AuthenticateWebFailure_AuthenticateFailureReason_INTERNALL_SERVER_ERROR;
constexpr int AuthenticateWebFailure_AuthenticateFailureReason_AuthenticateFailureReason_ARRAYSIZE = AuthenticateWebFailure_AuthenticateFailureReason_AuthenticateFailureReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticateWebFailure_AuthenticateFailureReason_descriptor();
template<typename T>
inline const std::string& AuthenticateWebFailure_AuthenticateFailureReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthenticateWebFailure_AuthenticateFailureReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthenticateWebFailure_AuthenticateFailureReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthenticateWebFailure_AuthenticateFailureReason_descriptor(), enum_t_value);
}
inline bool AuthenticateWebFailure_AuthenticateFailureReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuthenticateWebFailure_AuthenticateFailureReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthenticateWebFailure_AuthenticateFailureReason>(
    AuthenticateWebFailure_AuthenticateFailureReason_descriptor(), name, value);
}
// ===================================================================

class CreateAccountWeb PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.CreateAccountWeb) */ {
 public:
  inline CreateAccountWeb() : CreateAccountWeb(nullptr) {}
  virtual ~CreateAccountWeb();

  CreateAccountWeb(const CreateAccountWeb& from);
  CreateAccountWeb(CreateAccountWeb&& from) noexcept
    : CreateAccountWeb() {
    *this = ::std::move(from);
  }

  inline CreateAccountWeb& operator=(const CreateAccountWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWeb& operator=(CreateAccountWeb&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAccountWeb& default_instance();

  static inline const CreateAccountWeb* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWeb*>(
               &_CreateAccountWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateAccountWeb& a, CreateAccountWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWeb* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWeb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWeb* New() const final {
    return CreateMaybeMessage<CreateAccountWeb>(nullptr);
  }

  CreateAccountWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWeb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAccountWeb& from);
  void MergeFrom(const CreateAccountWeb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth.CreateAccountWeb";
  }
  protected:
  explicit CreateAccountWeb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Auth_2eproto);
    return ::descriptor_table_Auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlainTextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // string email = 2;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string plainTextPassword = 3;
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  void set_plaintextpassword(const std::string& value);
  void set_plaintextpassword(std::string&& value);
  void set_plaintextpassword(const char* value);
  void set_plaintextpassword(const char* value, size_t size);
  std::string* mutable_plaintextpassword();
  std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // int64 requestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:auth.CreateAccountWeb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Auth_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountWebSuccess PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.CreateAccountWebSuccess) */ {
 public:
  inline CreateAccountWebSuccess() : CreateAccountWebSuccess(nullptr) {}
  virtual ~CreateAccountWebSuccess();

  CreateAccountWebSuccess(const CreateAccountWebSuccess& from);
  CreateAccountWebSuccess(CreateAccountWebSuccess&& from) noexcept
    : CreateAccountWebSuccess() {
    *this = ::std::move(from);
  }

  inline CreateAccountWebSuccess& operator=(const CreateAccountWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWebSuccess& operator=(CreateAccountWebSuccess&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAccountWebSuccess& default_instance();

  static inline const CreateAccountWebSuccess* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWebSuccess*>(
               &_CreateAccountWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateAccountWebSuccess& a, CreateAccountWebSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWebSuccess* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWebSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWebSuccess* New() const final {
    return CreateMaybeMessage<CreateAccountWebSuccess>(nullptr);
  }

  CreateAccountWebSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWebSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAccountWebSuccess& from);
  void MergeFrom(const CreateAccountWebSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWebSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth.CreateAccountWebSuccess";
  }
  protected:
  explicit CreateAccountWebSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Auth_2eproto);
    return ::descriptor_table_Auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // int64 requestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 userId = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:auth.CreateAccountWebSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Auth_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountWebFaliure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.CreateAccountWebFaliure) */ {
 public:
  inline CreateAccountWebFaliure() : CreateAccountWebFaliure(nullptr) {}
  virtual ~CreateAccountWebFaliure();

  CreateAccountWebFaliure(const CreateAccountWebFaliure& from);
  CreateAccountWebFaliure(CreateAccountWebFaliure&& from) noexcept
    : CreateAccountWebFaliure() {
    *this = ::std::move(from);
  }

  inline CreateAccountWebFaliure& operator=(const CreateAccountWebFaliure& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWebFaliure& operator=(CreateAccountWebFaliure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAccountWebFaliure& default_instance();

  static inline const CreateAccountWebFaliure* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWebFaliure*>(
               &_CreateAccountWebFaliure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateAccountWebFaliure& a, CreateAccountWebFaliure& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWebFaliure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWebFaliure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWebFaliure* New() const final {
    return CreateMaybeMessage<CreateAccountWebFaliure>(nullptr);
  }

  CreateAccountWebFaliure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWebFaliure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAccountWebFaliure& from);
  void MergeFrom(const CreateAccountWebFaliure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWebFaliure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth.CreateAccountWebFaliure";
  }
  protected:
  explicit CreateAccountWebFaliure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Auth_2eproto);
    return ::descriptor_table_Auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateAccountWebFaliure_AccountFailureReason AccountFailureReason;
  static constexpr AccountFailureReason ACCOUNT_ALREADY_EXISTS =
    CreateAccountWebFaliure_AccountFailureReason_ACCOUNT_ALREADY_EXISTS;
  static constexpr AccountFailureReason INVALID_PASSWORD =
    CreateAccountWebFaliure_AccountFailureReason_INVALID_PASSWORD;
  static constexpr AccountFailureReason INTERNAL_SERVER_ERROR =
    CreateAccountWebFaliure_AccountFailureReason_INTERNAL_SERVER_ERROR;
  static inline bool AccountFailureReason_IsValid(int value) {
    return CreateAccountWebFaliure_AccountFailureReason_IsValid(value);
  }
  static constexpr AccountFailureReason AccountFailureReason_MIN =
    CreateAccountWebFaliure_AccountFailureReason_AccountFailureReason_MIN;
  static constexpr AccountFailureReason AccountFailureReason_MAX =
    CreateAccountWebFaliure_AccountFailureReason_AccountFailureReason_MAX;
  static constexpr int AccountFailureReason_ARRAYSIZE =
    CreateAccountWebFaliure_AccountFailureReason_AccountFailureReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AccountFailureReason_descriptor() {
    return CreateAccountWebFaliure_AccountFailureReason_descriptor();
  }
  template<typename T>
  static inline const std::string& AccountFailureReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccountFailureReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccountFailureReason_Name.");
    return CreateAccountWebFaliure_AccountFailureReason_Name(enum_t_value);
  }
  static inline bool AccountFailureReason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AccountFailureReason* value) {
    return CreateAccountWebFaliure_AccountFailureReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // int64 requestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .auth.CreateAccountWebFaliure.AccountFailureReason reason = 2;
  void clear_reason();
  ::auth::CreateAccountWebFaliure_AccountFailureReason reason() const;
  void set_reason(::auth::CreateAccountWebFaliure_AccountFailureReason value);
  private:
  ::auth::CreateAccountWebFaliure_AccountFailureReason _internal_reason() const;
  void _internal_set_reason(::auth::CreateAccountWebFaliure_AccountFailureReason value);
  public:

  // @@protoc_insertion_point(class_scope:auth.CreateAccountWebFaliure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Auth_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWeb PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.AuthenticateWeb) */ {
 public:
  inline AuthenticateWeb() : AuthenticateWeb(nullptr) {}
  virtual ~AuthenticateWeb();

  AuthenticateWeb(const AuthenticateWeb& from);
  AuthenticateWeb(AuthenticateWeb&& from) noexcept
    : AuthenticateWeb() {
    *this = ::std::move(from);
  }

  inline AuthenticateWeb& operator=(const AuthenticateWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWeb& operator=(AuthenticateWeb&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateWeb& default_instance();

  static inline const AuthenticateWeb* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWeb*>(
               &_AuthenticateWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthenticateWeb& a, AuthenticateWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWeb* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWeb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWeb* New() const final {
    return CreateMaybeMessage<AuthenticateWeb>(nullptr);
  }

  AuthenticateWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWeb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateWeb& from);
  void MergeFrom(const AuthenticateWeb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth.AuthenticateWeb";
  }
  protected:
  explicit AuthenticateWeb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Auth_2eproto);
    return ::descriptor_table_Auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlainTextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // string email = 2;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string plainTextPassword = 3;
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  void set_plaintextpassword(const std::string& value);
  void set_plaintextpassword(std::string&& value);
  void set_plaintextpassword(const char* value);
  void set_plaintextpassword(const char* value, size_t size);
  std::string* mutable_plaintextpassword();
  std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // int64 requestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:auth.AuthenticateWeb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Auth_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWebSuccess PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.AuthenticateWebSuccess) */ {
 public:
  inline AuthenticateWebSuccess() : AuthenticateWebSuccess(nullptr) {}
  virtual ~AuthenticateWebSuccess();

  AuthenticateWebSuccess(const AuthenticateWebSuccess& from);
  AuthenticateWebSuccess(AuthenticateWebSuccess&& from) noexcept
    : AuthenticateWebSuccess() {
    *this = ::std::move(from);
  }

  inline AuthenticateWebSuccess& operator=(const AuthenticateWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWebSuccess& operator=(AuthenticateWebSuccess&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateWebSuccess& default_instance();

  static inline const AuthenticateWebSuccess* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWebSuccess*>(
               &_AuthenticateWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AuthenticateWebSuccess& a, AuthenticateWebSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWebSuccess* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWebSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWebSuccess* New() const final {
    return CreateMaybeMessage<AuthenticateWebSuccess>(nullptr);
  }

  AuthenticateWebSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWebSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateWebSuccess& from);
  void MergeFrom(const AuthenticateWebSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWebSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth.AuthenticateWebSuccess";
  }
  protected:
  explicit AuthenticateWebSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Auth_2eproto);
    return ::descriptor_table_Auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreationDateFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string creationDate = 3;
  void clear_creationdate();
  const std::string& creationdate() const;
  void set_creationdate(const std::string& value);
  void set_creationdate(std::string&& value);
  void set_creationdate(const char* value);
  void set_creationdate(const char* value, size_t size);
  std::string* mutable_creationdate();
  std::string* release_creationdate();
  void set_allocated_creationdate(std::string* creationdate);
  private:
  const std::string& _internal_creationdate() const;
  void _internal_set_creationdate(const std::string& value);
  std::string* _internal_mutable_creationdate();
  public:

  // int64 requestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 userId = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:auth.AuthenticateWebSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationdate_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Auth_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWebFailure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.AuthenticateWebFailure) */ {
 public:
  inline AuthenticateWebFailure() : AuthenticateWebFailure(nullptr) {}
  virtual ~AuthenticateWebFailure();

  AuthenticateWebFailure(const AuthenticateWebFailure& from);
  AuthenticateWebFailure(AuthenticateWebFailure&& from) noexcept
    : AuthenticateWebFailure() {
    *this = ::std::move(from);
  }

  inline AuthenticateWebFailure& operator=(const AuthenticateWebFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWebFailure& operator=(AuthenticateWebFailure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateWebFailure& default_instance();

  static inline const AuthenticateWebFailure* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWebFailure*>(
               &_AuthenticateWebFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AuthenticateWebFailure& a, AuthenticateWebFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWebFailure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWebFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWebFailure* New() const final {
    return CreateMaybeMessage<AuthenticateWebFailure>(nullptr);
  }

  AuthenticateWebFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWebFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateWebFailure& from);
  void MergeFrom(const AuthenticateWebFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWebFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth.AuthenticateWebFailure";
  }
  protected:
  explicit AuthenticateWebFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Auth_2eproto);
    return ::descriptor_table_Auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AuthenticateWebFailure_AuthenticateFailureReason AuthenticateFailureReason;
  static constexpr AuthenticateFailureReason INVALID_CREDENTIALS =
    AuthenticateWebFailure_AuthenticateFailureReason_INVALID_CREDENTIALS;
  static constexpr AuthenticateFailureReason INTERNALL_SERVER_ERROR =
    AuthenticateWebFailure_AuthenticateFailureReason_INTERNALL_SERVER_ERROR;
  static inline bool AuthenticateFailureReason_IsValid(int value) {
    return AuthenticateWebFailure_AuthenticateFailureReason_IsValid(value);
  }
  static constexpr AuthenticateFailureReason AuthenticateFailureReason_MIN =
    AuthenticateWebFailure_AuthenticateFailureReason_AuthenticateFailureReason_MIN;
  static constexpr AuthenticateFailureReason AuthenticateFailureReason_MAX =
    AuthenticateWebFailure_AuthenticateFailureReason_AuthenticateFailureReason_MAX;
  static constexpr int AuthenticateFailureReason_ARRAYSIZE =
    AuthenticateWebFailure_AuthenticateFailureReason_AuthenticateFailureReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AuthenticateFailureReason_descriptor() {
    return AuthenticateWebFailure_AuthenticateFailureReason_descriptor();
  }
  template<typename T>
  static inline const std::string& AuthenticateFailureReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AuthenticateFailureReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AuthenticateFailureReason_Name.");
    return AuthenticateWebFailure_AuthenticateFailureReason_Name(enum_t_value);
  }
  static inline bool AuthenticateFailureReason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AuthenticateFailureReason* value) {
    return AuthenticateWebFailure_AuthenticateFailureReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // int64 requestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .auth.AuthenticateWebFailure.AuthenticateFailureReason reason = 2;
  void clear_reason();
  ::auth::AuthenticateWebFailure_AuthenticateFailureReason reason() const;
  void set_reason(::auth::AuthenticateWebFailure_AuthenticateFailureReason value);
  private:
  ::auth::AuthenticateWebFailure_AuthenticateFailureReason _internal_reason() const;
  void _internal_set_reason(::auth::AuthenticateWebFailure_AuthenticateFailureReason value);
  public:

  // @@protoc_insertion_point(class_scope:auth.AuthenticateWebFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Auth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAccountWeb

// int64 requestId = 1;
inline void CreateAccountWeb::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWeb::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWeb::requestid() const {
  // @@protoc_insertion_point(field_get:auth.CreateAccountWeb.requestId)
  return _internal_requestid();
}
inline void CreateAccountWeb::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  requestid_ = value;
}
inline void CreateAccountWeb::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:auth.CreateAccountWeb.requestId)
}

// string email = 2;
inline void CreateAccountWeb::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& CreateAccountWeb::email() const {
  // @@protoc_insertion_point(field_get:auth.CreateAccountWeb.email)
  return _internal_email();
}
inline void CreateAccountWeb::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:auth.CreateAccountWeb.email)
}
inline std::string* CreateAccountWeb::mutable_email() {
  // @@protoc_insertion_point(field_mutable:auth.CreateAccountWeb.email)
  return _internal_mutable_email();
}
inline const std::string& CreateAccountWeb::_internal_email() const {
  return email_.Get();
}
inline void CreateAccountWeb::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateAccountWeb::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:auth.CreateAccountWeb.email)
}
inline void CreateAccountWeb::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:auth.CreateAccountWeb.email)
}
inline void CreateAccountWeb::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:auth.CreateAccountWeb.email)
}
inline std::string* CreateAccountWeb::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateAccountWeb::release_email() {
  // @@protoc_insertion_point(field_release:auth.CreateAccountWeb.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAccountWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:auth.CreateAccountWeb.email)
}

// string plainTextPassword = 3;
inline void CreateAccountWeb::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmpty();
}
inline const std::string& CreateAccountWeb::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:auth.CreateAccountWeb.plainTextPassword)
  return _internal_plaintextpassword();
}
inline void CreateAccountWeb::set_plaintextpassword(const std::string& value) {
  _internal_set_plaintextpassword(value);
  // @@protoc_insertion_point(field_set:auth.CreateAccountWeb.plainTextPassword)
}
inline std::string* CreateAccountWeb::mutable_plaintextpassword() {
  // @@protoc_insertion_point(field_mutable:auth.CreateAccountWeb.plainTextPassword)
  return _internal_mutable_plaintextpassword();
}
inline const std::string& CreateAccountWeb::_internal_plaintextpassword() const {
  return plaintextpassword_.Get();
}
inline void CreateAccountWeb::_internal_set_plaintextpassword(const std::string& value) {
  
  plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateAccountWeb::set_plaintextpassword(std::string&& value) {
  
  plaintextpassword_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:auth.CreateAccountWeb.plainTextPassword)
}
inline void CreateAccountWeb::set_plaintextpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:auth.CreateAccountWeb.plainTextPassword)
}
inline void CreateAccountWeb::set_plaintextpassword(const char* value,
    size_t size) {
  
  plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:auth.CreateAccountWeb.plainTextPassword)
}
inline std::string* CreateAccountWeb::_internal_mutable_plaintextpassword() {
  
  return plaintextpassword_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateAccountWeb::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:auth.CreateAccountWeb.plainTextPassword)
  return plaintextpassword_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAccountWeb::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    
  } else {
    
  }
  plaintextpassword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpassword,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:auth.CreateAccountWeb.plainTextPassword)
}

// -------------------------------------------------------------------

// CreateAccountWebSuccess

// int64 requestId = 1;
inline void CreateAccountWebSuccess::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebSuccess::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebSuccess::requestid() const {
  // @@protoc_insertion_point(field_get:auth.CreateAccountWebSuccess.requestId)
  return _internal_requestid();
}
inline void CreateAccountWebSuccess::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  requestid_ = value;
}
inline void CreateAccountWebSuccess::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:auth.CreateAccountWebSuccess.requestId)
}

// int64 userId = 2;
inline void CreateAccountWebSuccess::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebSuccess::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:auth.CreateAccountWebSuccess.userId)
  return _internal_userid();
}
inline void CreateAccountWebSuccess::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void CreateAccountWebSuccess::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:auth.CreateAccountWebSuccess.userId)
}

// -------------------------------------------------------------------

// CreateAccountWebFaliure

// int64 requestId = 1;
inline void CreateAccountWebFaliure::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebFaliure::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebFaliure::requestid() const {
  // @@protoc_insertion_point(field_get:auth.CreateAccountWebFaliure.requestId)
  return _internal_requestid();
}
inline void CreateAccountWebFaliure::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  requestid_ = value;
}
inline void CreateAccountWebFaliure::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:auth.CreateAccountWebFaliure.requestId)
}

// .auth.CreateAccountWebFaliure.AccountFailureReason reason = 2;
inline void CreateAccountWebFaliure::clear_reason() {
  reason_ = 0;
}
inline ::auth::CreateAccountWebFaliure_AccountFailureReason CreateAccountWebFaliure::_internal_reason() const {
  return static_cast< ::auth::CreateAccountWebFaliure_AccountFailureReason >(reason_);
}
inline ::auth::CreateAccountWebFaliure_AccountFailureReason CreateAccountWebFaliure::reason() const {
  // @@protoc_insertion_point(field_get:auth.CreateAccountWebFaliure.reason)
  return _internal_reason();
}
inline void CreateAccountWebFaliure::_internal_set_reason(::auth::CreateAccountWebFaliure_AccountFailureReason value) {
  
  reason_ = value;
}
inline void CreateAccountWebFaliure::set_reason(::auth::CreateAccountWebFaliure_AccountFailureReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:auth.CreateAccountWebFaliure.reason)
}

// -------------------------------------------------------------------

// AuthenticateWeb

// int64 requestId = 1;
inline void AuthenticateWeb::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWeb::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWeb::requestid() const {
  // @@protoc_insertion_point(field_get:auth.AuthenticateWeb.requestId)
  return _internal_requestid();
}
inline void AuthenticateWeb::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  requestid_ = value;
}
inline void AuthenticateWeb::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:auth.AuthenticateWeb.requestId)
}

// string email = 2;
inline void AuthenticateWeb::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& AuthenticateWeb::email() const {
  // @@protoc_insertion_point(field_get:auth.AuthenticateWeb.email)
  return _internal_email();
}
inline void AuthenticateWeb::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:auth.AuthenticateWeb.email)
}
inline std::string* AuthenticateWeb::mutable_email() {
  // @@protoc_insertion_point(field_mutable:auth.AuthenticateWeb.email)
  return _internal_mutable_email();
}
inline const std::string& AuthenticateWeb::_internal_email() const {
  return email_.Get();
}
inline void AuthenticateWeb::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuthenticateWeb::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:auth.AuthenticateWeb.email)
}
inline void AuthenticateWeb::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:auth.AuthenticateWeb.email)
}
inline void AuthenticateWeb::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:auth.AuthenticateWeb.email)
}
inline std::string* AuthenticateWeb::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthenticateWeb::release_email() {
  // @@protoc_insertion_point(field_release:auth.AuthenticateWeb.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:auth.AuthenticateWeb.email)
}

// string plainTextPassword = 3;
inline void AuthenticateWeb::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmpty();
}
inline const std::string& AuthenticateWeb::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:auth.AuthenticateWeb.plainTextPassword)
  return _internal_plaintextpassword();
}
inline void AuthenticateWeb::set_plaintextpassword(const std::string& value) {
  _internal_set_plaintextpassword(value);
  // @@protoc_insertion_point(field_set:auth.AuthenticateWeb.plainTextPassword)
}
inline std::string* AuthenticateWeb::mutable_plaintextpassword() {
  // @@protoc_insertion_point(field_mutable:auth.AuthenticateWeb.plainTextPassword)
  return _internal_mutable_plaintextpassword();
}
inline const std::string& AuthenticateWeb::_internal_plaintextpassword() const {
  return plaintextpassword_.Get();
}
inline void AuthenticateWeb::_internal_set_plaintextpassword(const std::string& value) {
  
  plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuthenticateWeb::set_plaintextpassword(std::string&& value) {
  
  plaintextpassword_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:auth.AuthenticateWeb.plainTextPassword)
}
inline void AuthenticateWeb::set_plaintextpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:auth.AuthenticateWeb.plainTextPassword)
}
inline void AuthenticateWeb::set_plaintextpassword(const char* value,
    size_t size) {
  
  plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:auth.AuthenticateWeb.plainTextPassword)
}
inline std::string* AuthenticateWeb::_internal_mutable_plaintextpassword() {
  
  return plaintextpassword_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthenticateWeb::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:auth.AuthenticateWeb.plainTextPassword)
  return plaintextpassword_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateWeb::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    
  } else {
    
  }
  plaintextpassword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpassword,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:auth.AuthenticateWeb.plainTextPassword)
}

// -------------------------------------------------------------------

// AuthenticateWebSuccess

// int64 requestId = 1;
inline void AuthenticateWebSuccess::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebSuccess::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebSuccess::requestid() const {
  // @@protoc_insertion_point(field_get:auth.AuthenticateWebSuccess.requestId)
  return _internal_requestid();
}
inline void AuthenticateWebSuccess::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  requestid_ = value;
}
inline void AuthenticateWebSuccess::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:auth.AuthenticateWebSuccess.requestId)
}

// int64 userId = 2;
inline void AuthenticateWebSuccess::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebSuccess::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:auth.AuthenticateWebSuccess.userId)
  return _internal_userid();
}
inline void AuthenticateWebSuccess::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void AuthenticateWebSuccess::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:auth.AuthenticateWebSuccess.userId)
}

// string creationDate = 3;
inline void AuthenticateWebSuccess::clear_creationdate() {
  creationdate_.ClearToEmpty();
}
inline const std::string& AuthenticateWebSuccess::creationdate() const {
  // @@protoc_insertion_point(field_get:auth.AuthenticateWebSuccess.creationDate)
  return _internal_creationdate();
}
inline void AuthenticateWebSuccess::set_creationdate(const std::string& value) {
  _internal_set_creationdate(value);
  // @@protoc_insertion_point(field_set:auth.AuthenticateWebSuccess.creationDate)
}
inline std::string* AuthenticateWebSuccess::mutable_creationdate() {
  // @@protoc_insertion_point(field_mutable:auth.AuthenticateWebSuccess.creationDate)
  return _internal_mutable_creationdate();
}
inline const std::string& AuthenticateWebSuccess::_internal_creationdate() const {
  return creationdate_.Get();
}
inline void AuthenticateWebSuccess::_internal_set_creationdate(const std::string& value) {
  
  creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuthenticateWebSuccess::set_creationdate(std::string&& value) {
  
  creationdate_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:auth.AuthenticateWebSuccess.creationDate)
}
inline void AuthenticateWebSuccess::set_creationdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:auth.AuthenticateWebSuccess.creationDate)
}
inline void AuthenticateWebSuccess::set_creationdate(const char* value,
    size_t size) {
  
  creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:auth.AuthenticateWebSuccess.creationDate)
}
inline std::string* AuthenticateWebSuccess::_internal_mutable_creationdate() {
  
  return creationdate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthenticateWebSuccess::release_creationdate() {
  // @@protoc_insertion_point(field_release:auth.AuthenticateWebSuccess.creationDate)
  return creationdate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateWebSuccess::set_allocated_creationdate(std::string* creationdate) {
  if (creationdate != nullptr) {
    
  } else {
    
  }
  creationdate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creationdate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:auth.AuthenticateWebSuccess.creationDate)
}

// -------------------------------------------------------------------

// AuthenticateWebFailure

// int64 requestId = 1;
inline void AuthenticateWebFailure::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebFailure::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebFailure::requestid() const {
  // @@protoc_insertion_point(field_get:auth.AuthenticateWebFailure.requestId)
  return _internal_requestid();
}
inline void AuthenticateWebFailure::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  requestid_ = value;
}
inline void AuthenticateWebFailure::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:auth.AuthenticateWebFailure.requestId)
}

// .auth.AuthenticateWebFailure.AuthenticateFailureReason reason = 2;
inline void AuthenticateWebFailure::clear_reason() {
  reason_ = 0;
}
inline ::auth::AuthenticateWebFailure_AuthenticateFailureReason AuthenticateWebFailure::_internal_reason() const {
  return static_cast< ::auth::AuthenticateWebFailure_AuthenticateFailureReason >(reason_);
}
inline ::auth::AuthenticateWebFailure_AuthenticateFailureReason AuthenticateWebFailure::reason() const {
  // @@protoc_insertion_point(field_get:auth.AuthenticateWebFailure.reason)
  return _internal_reason();
}
inline void AuthenticateWebFailure::_internal_set_reason(::auth::AuthenticateWebFailure_AuthenticateFailureReason value) {
  
  reason_ = value;
}
inline void AuthenticateWebFailure::set_reason(::auth::AuthenticateWebFailure_AuthenticateFailureReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:auth.AuthenticateWebFailure.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auth

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::auth::CreateAccountWebFaliure_AccountFailureReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::auth::CreateAccountWebFaliure_AccountFailureReason>() {
  return ::auth::CreateAccountWebFaliure_AccountFailureReason_descriptor();
}
template <> struct is_proto_enum< ::auth::AuthenticateWebFailure_AuthenticateFailureReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::auth::AuthenticateWebFailure_AuthenticateFailureReason>() {
  return ::auth::AuthenticateWebFailure_AuthenticateFailureReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Auth_2eproto
