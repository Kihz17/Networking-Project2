// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Auth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Auth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Auth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Auth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Auth_2eproto;
namespace auth {
class AuthenticateWeb;
struct AuthenticateWebDefaultTypeInternal;
extern AuthenticateWebDefaultTypeInternal _AuthenticateWeb_default_instance_;
class AuthenticateWebResult;
struct AuthenticateWebResultDefaultTypeInternal;
extern AuthenticateWebResultDefaultTypeInternal _AuthenticateWebResult_default_instance_;
class CreateAccountWeb;
struct CreateAccountWebDefaultTypeInternal;
extern CreateAccountWebDefaultTypeInternal _CreateAccountWeb_default_instance_;
class CreateAccountWebResult;
struct CreateAccountWebResultDefaultTypeInternal;
extern CreateAccountWebResultDefaultTypeInternal _CreateAccountWebResult_default_instance_;
}  // namespace auth
PROTOBUF_NAMESPACE_OPEN
template<> ::auth::AuthenticateWeb* Arena::CreateMaybeMessage<::auth::AuthenticateWeb>(Arena*);
template<> ::auth::AuthenticateWebResult* Arena::CreateMaybeMessage<::auth::AuthenticateWebResult>(Arena*);
template<> ::auth::CreateAccountWeb* Arena::CreateMaybeMessage<::auth::CreateAccountWeb>(Arena*);
template<> ::auth::CreateAccountWebResult* Arena::CreateMaybeMessage<::auth::CreateAccountWebResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace auth {

enum CreateAccountWebResult_CreateAccountResult : int {
  CreateAccountWebResult_CreateAccountResult_SUCCESS = 0,
  CreateAccountWebResult_CreateAccountResult_ACCOUNT_ALREADY_EXISTS = 1,
  CreateAccountWebResult_CreateAccountResult_INVALID_PASSWORD = 2,
  CreateAccountWebResult_CreateAccountResult_INTERNAL_SERVER_ERROR = 3
};
bool CreateAccountWebResult_CreateAccountResult_IsValid(int value);
constexpr CreateAccountWebResult_CreateAccountResult CreateAccountWebResult_CreateAccountResult_CreateAccountResult_MIN = CreateAccountWebResult_CreateAccountResult_SUCCESS;
constexpr CreateAccountWebResult_CreateAccountResult CreateAccountWebResult_CreateAccountResult_CreateAccountResult_MAX = CreateAccountWebResult_CreateAccountResult_INTERNAL_SERVER_ERROR;
constexpr int CreateAccountWebResult_CreateAccountResult_CreateAccountResult_ARRAYSIZE = CreateAccountWebResult_CreateAccountResult_CreateAccountResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateAccountWebResult_CreateAccountResult_descriptor();
template<typename T>
inline const std::string& CreateAccountWebResult_CreateAccountResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateAccountWebResult_CreateAccountResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateAccountWebResult_CreateAccountResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateAccountWebResult_CreateAccountResult_descriptor(), enum_t_value);
}
inline bool CreateAccountWebResult_CreateAccountResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateAccountWebResult_CreateAccountResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateAccountWebResult_CreateAccountResult>(
    CreateAccountWebResult_CreateAccountResult_descriptor(), name, value);
}
enum AuthenticateWebResult_AuthenticateResult : int {
  AuthenticateWebResult_AuthenticateResult_SUCCESS = 0,
  AuthenticateWebResult_AuthenticateResult_INVALID_CREDENTIALS = 1,
  AuthenticateWebResult_AuthenticateResult_INTERNAL_SERVER_ERROR = 2
};
bool AuthenticateWebResult_AuthenticateResult_IsValid(int value);
constexpr AuthenticateWebResult_AuthenticateResult AuthenticateWebResult_AuthenticateResult_AuthenticateResult_MIN = AuthenticateWebResult_AuthenticateResult_SUCCESS;
constexpr AuthenticateWebResult_AuthenticateResult AuthenticateWebResult_AuthenticateResult_AuthenticateResult_MAX = AuthenticateWebResult_AuthenticateResult_INTERNAL_SERVER_ERROR;
constexpr int AuthenticateWebResult_AuthenticateResult_AuthenticateResult_ARRAYSIZE = AuthenticateWebResult_AuthenticateResult_AuthenticateResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticateWebResult_AuthenticateResult_descriptor();
template<typename T>
inline const std::string& AuthenticateWebResult_AuthenticateResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthenticateWebResult_AuthenticateResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthenticateWebResult_AuthenticateResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthenticateWebResult_AuthenticateResult_descriptor(), enum_t_value);
}
inline bool AuthenticateWebResult_AuthenticateResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuthenticateWebResult_AuthenticateResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthenticateWebResult_AuthenticateResult>(
    AuthenticateWebResult_AuthenticateResult_descriptor(), name, value);
}
// ===================================================================

class CreateAccountWeb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.CreateAccountWeb) */ {
 public:
  inline CreateAccountWeb() : CreateAccountWeb(nullptr) {}
  ~CreateAccountWeb() override;
  explicit constexpr CreateAccountWeb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountWeb(const CreateAccountWeb& from);
  CreateAccountWeb(CreateAccountWeb&& from) noexcept
    : CreateAccountWeb() {
    *this = ::std::move(from);
  }

  inline CreateAccountWeb& operator=(const CreateAccountWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWeb& operator=(CreateAccountWeb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountWeb& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountWeb* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWeb*>(
               &_CreateAccountWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateAccountWeb& a, CreateAccountWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWeb* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWeb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWeb* New() const final {
    return new CreateAccountWeb();
  }

  CreateAccountWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWeb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountWeb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAccountWeb& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth.CreateAccountWeb";
  }
  protected:
  explicit CreateAccountWeb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlainTextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // optional string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // optional string plainTextPassword = 3;
  bool has_plaintextpassword() const;
  private:
  bool _internal_has_plaintextpassword() const;
  public:
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plaintextpassword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plaintextpassword();
  PROTOBUF_MUST_USE_RESULT std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // optional int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:auth.CreateAccountWeb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  friend struct ::TableStruct_Auth_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountWebResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.CreateAccountWebResult) */ {
 public:
  inline CreateAccountWebResult() : CreateAccountWebResult(nullptr) {}
  ~CreateAccountWebResult() override;
  explicit constexpr CreateAccountWebResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountWebResult(const CreateAccountWebResult& from);
  CreateAccountWebResult(CreateAccountWebResult&& from) noexcept
    : CreateAccountWebResult() {
    *this = ::std::move(from);
  }

  inline CreateAccountWebResult& operator=(const CreateAccountWebResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWebResult& operator=(CreateAccountWebResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountWebResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountWebResult* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWebResult*>(
               &_CreateAccountWebResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateAccountWebResult& a, CreateAccountWebResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWebResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWebResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWebResult* New() const final {
    return new CreateAccountWebResult();
  }

  CreateAccountWebResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWebResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountWebResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAccountWebResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWebResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth.CreateAccountWebResult";
  }
  protected:
  explicit CreateAccountWebResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateAccountWebResult_CreateAccountResult CreateAccountResult;
  static constexpr CreateAccountResult SUCCESS =
    CreateAccountWebResult_CreateAccountResult_SUCCESS;
  static constexpr CreateAccountResult ACCOUNT_ALREADY_EXISTS =
    CreateAccountWebResult_CreateAccountResult_ACCOUNT_ALREADY_EXISTS;
  static constexpr CreateAccountResult INVALID_PASSWORD =
    CreateAccountWebResult_CreateAccountResult_INVALID_PASSWORD;
  static constexpr CreateAccountResult INTERNAL_SERVER_ERROR =
    CreateAccountWebResult_CreateAccountResult_INTERNAL_SERVER_ERROR;
  static inline bool CreateAccountResult_IsValid(int value) {
    return CreateAccountWebResult_CreateAccountResult_IsValid(value);
  }
  static constexpr CreateAccountResult CreateAccountResult_MIN =
    CreateAccountWebResult_CreateAccountResult_CreateAccountResult_MIN;
  static constexpr CreateAccountResult CreateAccountResult_MAX =
    CreateAccountWebResult_CreateAccountResult_CreateAccountResult_MAX;
  static constexpr int CreateAccountResult_ARRAYSIZE =
    CreateAccountWebResult_CreateAccountResult_CreateAccountResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CreateAccountResult_descriptor() {
    return CreateAccountWebResult_CreateAccountResult_descriptor();
  }
  template<typename T>
  static inline const std::string& CreateAccountResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CreateAccountResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CreateAccountResult_Name.");
    return CreateAccountWebResult_CreateAccountResult_Name(enum_t_value);
  }
  static inline bool CreateAccountResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CreateAccountResult* value) {
    return CreateAccountWebResult_CreateAccountResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kReasonFieldNumber = 3,
  };
  // optional int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .auth.CreateAccountWebResult.CreateAccountResult reason = 3;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::auth::CreateAccountWebResult_CreateAccountResult reason() const;
  void set_reason(::auth::CreateAccountWebResult_CreateAccountResult value);
  private:
  ::auth::CreateAccountWebResult_CreateAccountResult _internal_reason() const;
  void _internal_set_reason(::auth::CreateAccountWebResult_CreateAccountResult value);
  public:

  // @@protoc_insertion_point(class_scope:auth.CreateAccountWebResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  int reason_;
  friend struct ::TableStruct_Auth_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWeb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.AuthenticateWeb) */ {
 public:
  inline AuthenticateWeb() : AuthenticateWeb(nullptr) {}
  ~AuthenticateWeb() override;
  explicit constexpr AuthenticateWeb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateWeb(const AuthenticateWeb& from);
  AuthenticateWeb(AuthenticateWeb&& from) noexcept
    : AuthenticateWeb() {
    *this = ::std::move(from);
  }

  inline AuthenticateWeb& operator=(const AuthenticateWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWeb& operator=(AuthenticateWeb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateWeb& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateWeb* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWeb*>(
               &_AuthenticateWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AuthenticateWeb& a, AuthenticateWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWeb* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWeb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWeb* New() const final {
    return new AuthenticateWeb();
  }

  AuthenticateWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWeb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateWeb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticateWeb& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth.AuthenticateWeb";
  }
  protected:
  explicit AuthenticateWeb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlainTextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // optional string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // optional string plainTextPassword = 3;
  bool has_plaintextpassword() const;
  private:
  bool _internal_has_plaintextpassword() const;
  public:
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plaintextpassword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plaintextpassword();
  PROTOBUF_MUST_USE_RESULT std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // optional int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:auth.AuthenticateWeb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  friend struct ::TableStruct_Auth_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWebResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.AuthenticateWebResult) */ {
 public:
  inline AuthenticateWebResult() : AuthenticateWebResult(nullptr) {}
  ~AuthenticateWebResult() override;
  explicit constexpr AuthenticateWebResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateWebResult(const AuthenticateWebResult& from);
  AuthenticateWebResult(AuthenticateWebResult&& from) noexcept
    : AuthenticateWebResult() {
    *this = ::std::move(from);
  }

  inline AuthenticateWebResult& operator=(const AuthenticateWebResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWebResult& operator=(AuthenticateWebResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateWebResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateWebResult* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWebResult*>(
               &_AuthenticateWebResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthenticateWebResult& a, AuthenticateWebResult& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWebResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWebResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWebResult* New() const final {
    return new AuthenticateWebResult();
  }

  AuthenticateWebResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWebResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateWebResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticateWebResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWebResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth.AuthenticateWebResult";
  }
  protected:
  explicit AuthenticateWebResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AuthenticateWebResult_AuthenticateResult AuthenticateResult;
  static constexpr AuthenticateResult SUCCESS =
    AuthenticateWebResult_AuthenticateResult_SUCCESS;
  static constexpr AuthenticateResult INVALID_CREDENTIALS =
    AuthenticateWebResult_AuthenticateResult_INVALID_CREDENTIALS;
  static constexpr AuthenticateResult INTERNAL_SERVER_ERROR =
    AuthenticateWebResult_AuthenticateResult_INTERNAL_SERVER_ERROR;
  static inline bool AuthenticateResult_IsValid(int value) {
    return AuthenticateWebResult_AuthenticateResult_IsValid(value);
  }
  static constexpr AuthenticateResult AuthenticateResult_MIN =
    AuthenticateWebResult_AuthenticateResult_AuthenticateResult_MIN;
  static constexpr AuthenticateResult AuthenticateResult_MAX =
    AuthenticateWebResult_AuthenticateResult_AuthenticateResult_MAX;
  static constexpr int AuthenticateResult_ARRAYSIZE =
    AuthenticateWebResult_AuthenticateResult_AuthenticateResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AuthenticateResult_descriptor() {
    return AuthenticateWebResult_AuthenticateResult_descriptor();
  }
  template<typename T>
  static inline const std::string& AuthenticateResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AuthenticateResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AuthenticateResult_Name.");
    return AuthenticateWebResult_AuthenticateResult_Name(enum_t_value);
  }
  static inline bool AuthenticateResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AuthenticateResult* value) {
    return AuthenticateWebResult_AuthenticateResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCreationDateFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kReasonFieldNumber = 3,
  };
  // optional string creationDate = 4;
  bool has_creationdate() const;
  private:
  bool _internal_has_creationdate() const;
  public:
  void clear_creationdate();
  const std::string& creationdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creationdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creationdate();
  PROTOBUF_MUST_USE_RESULT std::string* release_creationdate();
  void set_allocated_creationdate(std::string* creationdate);
  private:
  const std::string& _internal_creationdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creationdate(const std::string& value);
  std::string* _internal_mutable_creationdate();
  public:

  // optional int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .auth.AuthenticateWebResult.AuthenticateResult reason = 3;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::auth::AuthenticateWebResult_AuthenticateResult reason() const;
  void set_reason(::auth::AuthenticateWebResult_AuthenticateResult value);
  private:
  ::auth::AuthenticateWebResult_AuthenticateResult _internal_reason() const;
  void _internal_set_reason(::auth::AuthenticateWebResult_AuthenticateResult value);
  public:

  // @@protoc_insertion_point(class_scope:auth.AuthenticateWebResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationdate_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  int reason_;
  friend struct ::TableStruct_Auth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAccountWeb

// optional int64 requestId = 1;
inline bool CreateAccountWeb::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreateAccountWeb::has_requestid() const {
  return _internal_has_requestid();
}
inline void CreateAccountWeb::clear_requestid() {
  requestid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWeb::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWeb::requestid() const {
  // @@protoc_insertion_point(field_get:auth.CreateAccountWeb.requestId)
  return _internal_requestid();
}
inline void CreateAccountWeb::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  requestid_ = value;
}
inline void CreateAccountWeb::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:auth.CreateAccountWeb.requestId)
}

// optional string email = 2;
inline bool CreateAccountWeb::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateAccountWeb::has_email() const {
  return _internal_has_email();
}
inline void CreateAccountWeb::clear_email() {
  email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateAccountWeb::email() const {
  // @@protoc_insertion_point(field_get:auth.CreateAccountWeb.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAccountWeb::set_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:auth.CreateAccountWeb.email)
}
inline std::string* CreateAccountWeb::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:auth.CreateAccountWeb.email)
  return _s;
}
inline const std::string& CreateAccountWeb::_internal_email() const {
  return email_.Get();
}
inline void CreateAccountWeb::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::release_email() {
  // @@protoc_insertion_point(field_release:auth.CreateAccountWeb.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAccountWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:auth.CreateAccountWeb.email)
}

// optional string plainTextPassword = 3;
inline bool CreateAccountWeb::_internal_has_plaintextpassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateAccountWeb::has_plaintextpassword() const {
  return _internal_has_plaintextpassword();
}
inline void CreateAccountWeb::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateAccountWeb::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:auth.CreateAccountWeb.plainTextPassword)
  return _internal_plaintextpassword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAccountWeb::set_plaintextpassword(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:auth.CreateAccountWeb.plainTextPassword)
}
inline std::string* CreateAccountWeb::mutable_plaintextpassword() {
  std::string* _s = _internal_mutable_plaintextpassword();
  // @@protoc_insertion_point(field_mutable:auth.CreateAccountWeb.plainTextPassword)
  return _s;
}
inline const std::string& CreateAccountWeb::_internal_plaintextpassword() const {
  return plaintextpassword_.Get();
}
inline void CreateAccountWeb::_internal_set_plaintextpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::_internal_mutable_plaintextpassword() {
  _has_bits_[0] |= 0x00000002u;
  return plaintextpassword_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:auth.CreateAccountWeb.plainTextPassword)
  if (!_internal_has_plaintextpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plaintextpassword_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAccountWeb::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plaintextpassword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpassword,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:auth.CreateAccountWeb.plainTextPassword)
}

// -------------------------------------------------------------------

// CreateAccountWebResult

// optional int64 requestId = 1;
inline bool CreateAccountWebResult::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateAccountWebResult::has_requestid() const {
  return _internal_has_requestid();
}
inline void CreateAccountWebResult::clear_requestid() {
  requestid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebResult::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebResult::requestid() const {
  // @@protoc_insertion_point(field_get:auth.CreateAccountWebResult.requestId)
  return _internal_requestid();
}
inline void CreateAccountWebResult::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void CreateAccountWebResult::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:auth.CreateAccountWebResult.requestId)
}

// optional int64 userId = 2;
inline bool CreateAccountWebResult::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateAccountWebResult::has_userid() const {
  return _internal_has_userid();
}
inline void CreateAccountWebResult::clear_userid() {
  userid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebResult::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebResult::userid() const {
  // @@protoc_insertion_point(field_get:auth.CreateAccountWebResult.userId)
  return _internal_userid();
}
inline void CreateAccountWebResult::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  userid_ = value;
}
inline void CreateAccountWebResult::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:auth.CreateAccountWebResult.userId)
}

// optional .auth.CreateAccountWebResult.CreateAccountResult reason = 3;
inline bool CreateAccountWebResult::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreateAccountWebResult::has_reason() const {
  return _internal_has_reason();
}
inline void CreateAccountWebResult::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::auth::CreateAccountWebResult_CreateAccountResult CreateAccountWebResult::_internal_reason() const {
  return static_cast< ::auth::CreateAccountWebResult_CreateAccountResult >(reason_);
}
inline ::auth::CreateAccountWebResult_CreateAccountResult CreateAccountWebResult::reason() const {
  // @@protoc_insertion_point(field_get:auth.CreateAccountWebResult.reason)
  return _internal_reason();
}
inline void CreateAccountWebResult::_internal_set_reason(::auth::CreateAccountWebResult_CreateAccountResult value) {
  assert(::auth::CreateAccountWebResult_CreateAccountResult_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  reason_ = value;
}
inline void CreateAccountWebResult::set_reason(::auth::CreateAccountWebResult_CreateAccountResult value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:auth.CreateAccountWebResult.reason)
}

// -------------------------------------------------------------------

// AuthenticateWeb

// optional int64 requestId = 1;
inline bool AuthenticateWeb::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_requestid() const {
  return _internal_has_requestid();
}
inline void AuthenticateWeb::clear_requestid() {
  requestid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWeb::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWeb::requestid() const {
  // @@protoc_insertion_point(field_get:auth.AuthenticateWeb.requestId)
  return _internal_requestid();
}
inline void AuthenticateWeb::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  requestid_ = value;
}
inline void AuthenticateWeb::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:auth.AuthenticateWeb.requestId)
}

// optional string email = 2;
inline bool AuthenticateWeb::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_email() const {
  return _internal_has_email();
}
inline void AuthenticateWeb::clear_email() {
  email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateWeb::email() const {
  // @@protoc_insertion_point(field_get:auth.AuthenticateWeb.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateWeb::set_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:auth.AuthenticateWeb.email)
}
inline std::string* AuthenticateWeb::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:auth.AuthenticateWeb.email)
  return _s;
}
inline const std::string& AuthenticateWeb::_internal_email() const {
  return email_.Get();
}
inline void AuthenticateWeb::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::release_email() {
  // @@protoc_insertion_point(field_release:auth.AuthenticateWeb.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticateWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:auth.AuthenticateWeb.email)
}

// optional string plainTextPassword = 3;
inline bool AuthenticateWeb::_internal_has_plaintextpassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_plaintextpassword() const {
  return _internal_has_plaintextpassword();
}
inline void AuthenticateWeb::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthenticateWeb::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:auth.AuthenticateWeb.plainTextPassword)
  return _internal_plaintextpassword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateWeb::set_plaintextpassword(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:auth.AuthenticateWeb.plainTextPassword)
}
inline std::string* AuthenticateWeb::mutable_plaintextpassword() {
  std::string* _s = _internal_mutable_plaintextpassword();
  // @@protoc_insertion_point(field_mutable:auth.AuthenticateWeb.plainTextPassword)
  return _s;
}
inline const std::string& AuthenticateWeb::_internal_plaintextpassword() const {
  return plaintextpassword_.Get();
}
inline void AuthenticateWeb::_internal_set_plaintextpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::_internal_mutable_plaintextpassword() {
  _has_bits_[0] |= 0x00000002u;
  return plaintextpassword_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:auth.AuthenticateWeb.plainTextPassword)
  if (!_internal_has_plaintextpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plaintextpassword_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticateWeb::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plaintextpassword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpassword,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:auth.AuthenticateWeb.plainTextPassword)
}

// -------------------------------------------------------------------

// AuthenticateWebResult

// optional int64 requestId = 1;
inline bool AuthenticateWebResult::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticateWebResult::has_requestid() const {
  return _internal_has_requestid();
}
inline void AuthenticateWebResult::clear_requestid() {
  requestid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebResult::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebResult::requestid() const {
  // @@protoc_insertion_point(field_get:auth.AuthenticateWebResult.requestId)
  return _internal_requestid();
}
inline void AuthenticateWebResult::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  requestid_ = value;
}
inline void AuthenticateWebResult::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:auth.AuthenticateWebResult.requestId)
}

// optional int64 userId = 2;
inline bool AuthenticateWebResult::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthenticateWebResult::has_userid() const {
  return _internal_has_userid();
}
inline void AuthenticateWebResult::clear_userid() {
  userid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebResult::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebResult::userid() const {
  // @@protoc_insertion_point(field_get:auth.AuthenticateWebResult.userId)
  return _internal_userid();
}
inline void AuthenticateWebResult::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  userid_ = value;
}
inline void AuthenticateWebResult::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:auth.AuthenticateWebResult.userId)
}

// optional .auth.AuthenticateWebResult.AuthenticateResult reason = 3;
inline bool AuthenticateWebResult::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AuthenticateWebResult::has_reason() const {
  return _internal_has_reason();
}
inline void AuthenticateWebResult::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::auth::AuthenticateWebResult_AuthenticateResult AuthenticateWebResult::_internal_reason() const {
  return static_cast< ::auth::AuthenticateWebResult_AuthenticateResult >(reason_);
}
inline ::auth::AuthenticateWebResult_AuthenticateResult AuthenticateWebResult::reason() const {
  // @@protoc_insertion_point(field_get:auth.AuthenticateWebResult.reason)
  return _internal_reason();
}
inline void AuthenticateWebResult::_internal_set_reason(::auth::AuthenticateWebResult_AuthenticateResult value) {
  assert(::auth::AuthenticateWebResult_AuthenticateResult_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  reason_ = value;
}
inline void AuthenticateWebResult::set_reason(::auth::AuthenticateWebResult_AuthenticateResult value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:auth.AuthenticateWebResult.reason)
}

// optional string creationDate = 4;
inline bool AuthenticateWebResult::_internal_has_creationdate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateWebResult::has_creationdate() const {
  return _internal_has_creationdate();
}
inline void AuthenticateWebResult::clear_creationdate() {
  creationdate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateWebResult::creationdate() const {
  // @@protoc_insertion_point(field_get:auth.AuthenticateWebResult.creationDate)
  return _internal_creationdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateWebResult::set_creationdate(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:auth.AuthenticateWebResult.creationDate)
}
inline std::string* AuthenticateWebResult::mutable_creationdate() {
  std::string* _s = _internal_mutable_creationdate();
  // @@protoc_insertion_point(field_mutable:auth.AuthenticateWebResult.creationDate)
  return _s;
}
inline const std::string& AuthenticateWebResult::_internal_creationdate() const {
  return creationdate_.Get();
}
inline void AuthenticateWebResult::_internal_set_creationdate(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateWebResult::_internal_mutable_creationdate() {
  _has_bits_[0] |= 0x00000001u;
  return creationdate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateWebResult::release_creationdate() {
  // @@protoc_insertion_point(field_release:auth.AuthenticateWebResult.creationDate)
  if (!_internal_has_creationdate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return creationdate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticateWebResult::set_allocated_creationdate(std::string* creationdate) {
  if (creationdate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  creationdate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creationdate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:auth.AuthenticateWebResult.creationDate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auth

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::auth::CreateAccountWebResult_CreateAccountResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::auth::CreateAccountWebResult_CreateAccountResult>() {
  return ::auth::CreateAccountWebResult_CreateAccountResult_descriptor();
}
template <> struct is_proto_enum< ::auth::AuthenticateWebResult_AuthenticateResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::auth::AuthenticateWebResult_AuthenticateResult>() {
  return ::auth::AuthenticateWebResult_AuthenticateResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Auth_2eproto
